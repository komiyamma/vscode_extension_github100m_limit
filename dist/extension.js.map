{"version":3,"file":"extension.js","mappings":"swBAEA,kBACA,YAIA,oBAAyBA,GAIxBC,QAAQC,IAAI,6EAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,8CAA8C,SAO5FF,EAAOG,UAAUC,uBAAuBC,IAEnBA,EAAMC,SAa/B,WAEI,GADuBN,EAAOG,UAAUI,iBAClB,CAClB,IAAIC,EAAeR,EAAOG,UAAUI,mBAAmB,GAEvD,GAAIC,EAAc,CACd,IAAIC,EAAkBD,EAAaE,IAC/BC,EAAiBF,EAAgBG,OAAS,eAC9C,IAAKC,EAAGC,WAAWH,GAEf,OAAO,EAEX,IAAII,EAAuBN,EAAgBG,OAAS,4BAChDI,EAAqBP,EAAgBG,OAAS,0BAC9CK,EAAoBR,EAAgBG,OAAS,yBAC7CM,EAAkBT,EAAgBG,OAAS,uBAE/C,GAAIC,EAAGC,WAAWC,IAAyBF,EAAGC,WAAWE,IAAuBH,EAAGC,WAAWG,IAAsBJ,EAAGC,WAAWI,GAC9H,OAAO,EAGX,IAAIC,EAAoBV,EAAgBG,OAAS,yBACjD,GAAIC,EAAGC,WAAWK,GAEd,OAAO,EACJ,CAGH,MAAMC,EAAgB,iiBAgBtBP,EAAGQ,cAAcF,EAAmBC,EAExC,CACJ,CACJ,CACJ,CAvDQE,EAAiB,IAGxB1B,EAAQ2B,cAAcC,KAAKzB,EAC5B,EAsDA,wBAA8B,C,UC1F9B0B,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://github100mbyteslimithook/./src/extension.ts","webpack://github100mbyteslimithook/external commonjs \"vscode\"","webpack://github100mbyteslimithook/external node-commonjs \"fs\"","webpack://github100mbyteslimithook/webpack/bootstrap","webpack://github100mbyteslimithook/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"github100mbyteslimithook\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('github100mbyteslimithook.initializeCommand', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\t// vscode.window.showInformationMessage('Hello World from Github100MBytesLimiterHook!');\n\t});\n\n    // ワークスペース内のテキストドキュメントが開かれたときに呼び出されるコールバック\n    vscode.workspace.onDidOpenTextDocument((event) => {\n        // 開かれたファイルのパスを取得\n        const fileName = event.fileName;\n\n        // vscode.window.showInformationMessage('ディレクトリが開かれました: ' + fileName);\n        \n        // gitリポジトリのディレクトリかどうかを判定\n        // ここでfileNameに対する判定ロジックを実装\n\n        createPreCommit();\n        \n    });\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction createPreCommit() {\n    let workspaceFolders = vscode.workspace.workspaceFolders;\n    if (workspaceFolders) {\n        let activeFolder = vscode.workspace.workspaceFolders?.[0];\n        \n        if (activeFolder) {\n            let activeFolderUri = activeFolder.uri;\n            let configFilePath = activeFolderUri.fsPath + '/.git/config';\n            if (!fs.existsSync(configFilePath)) {\n                // vscode.window.showInformationMessage(\"Configが無い\");\n                return false;\n            }\n            let postCheckoutFilePath = activeFolderUri.fsPath + '/.git/hooks/post-checkout';\n            let postCommitFilePath = activeFolderUri.fsPath + '/.git/hooks/post-commit';\n            let postMergeFilePath = activeFolderUri.fsPath + '/.git/hooks/post-merge';\n            let prePushFilePath = activeFolderUri.fsPath + '/.git/hooks/pre-push';\n            // これはLFSで初期化されている\n            if (fs.existsSync(postCheckoutFilePath) && fs.existsSync(postCommitFilePath) && fs.existsSync(postMergeFilePath) && fs.existsSync(prePushFilePath)) {\n                return false;\n            }\n\n            let preCommitFilePath = activeFolderUri.fsPath + '/.git/hooks/pre-commit';\n            if (fs.existsSync(preCommitFilePath)) {\n                // vscode.window.showInformationMessage('pre-commitファイル発見!!: ' + preCommitFilePath);\n                return false;\n            } else {\n                // vscode.window.showErrorMessage('pre-commitファイルなし!! 作成できる!!: ' + preCommitFilePath);\n\n                const scriptContent = `#!/bin/sh\n\n# Check if any file being committed exceeds 100MB\nif [ -f .git/hooks/post-checkout ] && [ -f .git/hooks/post-commit ] && [ -f .git/hooks/post-merge ] && [ -f .git/hooks/pre-push ]; then\n    limit=999999999 # no use\nelse\n    limit=104857600 # 100MB in bytes\n    for file in $(git diff --cached --name-only); do\n        file_size=$(stat -c %s \"$file\")\n        if [ $file_size -gt $limit ]; then\n            echo \"Error: Cannot commit a file larger than 100 MB. Abort commit.\"\n            exit 1\n        fi\n    done\nfi\n`;\n                fs.writeFileSync(preCommitFilePath, scriptContent);\n                return true;\n            }\n        }\n    }\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","workspace","onDidOpenTextDocument","event","fileName","workspaceFolders","activeFolder","activeFolderUri","uri","configFilePath","fsPath","fs","existsSync","postCheckoutFilePath","postCommitFilePath","postMergeFilePath","prePushFilePath","preCommitFilePath","scriptContent","writeFileSync","createPreCommit","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}