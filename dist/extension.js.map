{"version":3,"file":"extension.js","mappings":"swBAAA,kBACA,YAQAA,eAAeC,EAAuBC,EAAkCC,GACpE,MAAMC,EAAiBD,EAAQE,OAAS,eACxC,IAAKC,EAAGC,WAAWH,GACf,OAAO,EAGX,MAAMI,EAAuBL,EAAQE,OAAS,4BACxCI,EAAqBN,EAAQE,OAAS,0BACtCK,EAAoBP,EAAQE,OAAS,yBACrCM,EAAkBR,EAAQE,OAAS,uBAEzC,GAAIC,EAAGC,WAAWC,IAAyBF,EAAGC,WAAWE,IAAuBH,EAAGC,WAAWG,IAAsBJ,EAAGC,WAAWI,GAC9H,OAAO,EAGX,MAAMC,EAAeT,EAAQE,OAAS,cAChCQ,EAAoBD,EAAe,cACzC,GAAIN,EAAGC,WAAWM,GACd,OAAO,EAGX,IACSP,EAAGC,WAAWK,IACfN,EAAGQ,UAAUF,EAAc,CAAEG,WAAW,IAG5C,MAAMC,EAAUC,EAAOC,IAAIC,SAASjB,EAAQkB,aAAc,YAAa,sBACjEC,QAAsBJ,EAAOK,UAAUhB,GAAGiB,SAASP,GACzDV,EAAGkB,cAAcX,EAAmBQ,GAEpC,MAAMI,GAASR,EAAOS,IAAIC,UAAY,IAAIC,cAEpCC,EADmB,OAAVJ,GAAkBA,EAAMK,WAAW,OAE5C,6BACA,kCACNb,EAAOc,OAAOC,oBAAoBH,EAAK,KAEvC,MAAMI,GAAQhB,EAAOS,IAAIC,UAAY,IAAIC,cAMzC,MALuB,OAATK,GAAiBA,EAAKH,WAAW,QAKxC,CACX,CAAE,MAAOI,GACSA,GAAOA,EAAIC,MAAQC,OAAOF,EAAIC,MAA5C,MACMF,GAAQhB,EAAOS,IAAIC,UAAY,IAAIC,cAMzC,MALuB,OAATK,GAAiBA,EAAKH,WAAW,QAKxC,CACX,CACJ,CA5DA,oBAAyB5B,IA8DzBF,eAAoCE,GAChC,IACI,MAAMmC,EAASpB,EAAOqB,WAAWC,aAAkB,cAC7CC,EAAMH,GAAQI,SAASC,SAAS,GACtC,IAAKF,EACD,OAIJ,IAAK,MAAMG,KAAQH,EAAII,aACd3C,EAAuBC,EAASyC,EAAKxC,SAI9C,MAAM0C,EAAUL,EAAIM,uBAAuBH,IAClC1C,EAAuBC,EAASyC,EAAKxC,QAAQ,IAElD0C,GACA3C,EAAQ6C,cAAcC,KAAKH,GAI/B,MAAMI,EAAQhC,EAAOK,UAAU4B,6BAA6BC,IACxD,IAAK,MAAMC,KAAKD,EAAEE,MACTpD,EAAuBC,EAASkD,EAAEE,IAC3C,IAEJpD,EAAQ6C,cAAcC,KAAKC,EAC/B,CAAE,MAEF,CACJ,CA3FSM,CAAqBrD,EAC9B,EA6FA,wBAA8B,C,UCnG9BsD,EAAOf,QAAUgB,QAAQ,S,UCAzBD,EAAOf,QAAUgB,QAAQ,K,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAarB,QAGrB,IAAIe,EAASE,EAAyBG,GAAY,CAGjDpB,QAAS,CAAC,GAOX,OAHAuB,EAAoBH,GAAUI,KAAKT,EAAOf,QAASe,EAAQA,EAAOf,QAASmB,GAGpEJ,EAAOf,OACf,CCnB0BmB,CAAoB,K","sources":["webpack://github100mbyteslimithook/./src/extension.ts","webpack://github100mbyteslimithook/external commonjs \"vscode\"","webpack://github100mbyteslimithook/external node-commonjs \"fs\"","webpack://github100mbyteslimithook/webpack/bootstrap","webpack://github100mbyteslimithook/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\n\nexport function activate(context: vscode.ExtensionContext) {\n    // Prefer Git extension callbacks over document-open scanning\n    void wireWithGitExtension(context);\n}\n\n// Ensure pre-commit hook exists for a given repository root\nasync function ensurePreCommitForRoot(context: vscode.ExtensionContext, rootUri: vscode.Uri) {\n    const configFilePath = rootUri.fsPath + '/.git/config';\n    if (!fs.existsSync(configFilePath)) {\n        return false;\n    }\n\n    const postCheckoutFilePath = rootUri.fsPath + '/.git/hooks/post-checkout';\n    const postCommitFilePath = rootUri.fsPath + '/.git/hooks/post-commit';\n    const postMergeFilePath = rootUri.fsPath + '/.git/hooks/post-merge';\n    const prePushFilePath = rootUri.fsPath + '/.git/hooks/pre-push';\n    // If LFS hooks exist, skip\n    if (fs.existsSync(postCheckoutFilePath) && fs.existsSync(postCommitFilePath) && fs.existsSync(postMergeFilePath) && fs.existsSync(prePushFilePath)) {\n        return false;\n    }\n\n    const hooksDirPath = rootUri.fsPath + '/.git/hooks';\n    const preCommitFilePath = hooksDirPath + '/pre-commit';\n    if (fs.existsSync(preCommitFilePath)) {\n        return false;\n    }\n\n    try {\n        if (!fs.existsSync(hooksDirPath)) {\n            fs.mkdirSync(hooksDirPath, { recursive: true });\n        }\n\n        const hookUri = vscode.Uri.joinPath(context.extensionUri, 'resources', 'pre-commit-hook.sh');\n        const scriptContent = await vscode.workspace.fs.readFile(hookUri);\n        fs.writeFileSync(preCommitFilePath, scriptContent);\n\n        const lang2 = (vscode.env.language || '').toLowerCase();\n        const isJa2 = (lang2 === 'ja' || lang2.startsWith('ja-'));\n        const msg = isJa2\n            ? 'Github 100MB 制限フックを有効化しました'\n            : 'Github 100MB Limit Hook enabled';\n        vscode.window.setStatusBarMessage(msg, 3000);\n\n        const lang = (vscode.env.language || '').toLowerCase();\n        const isJa = (lang === 'ja' || lang.startsWith('ja-'));\n        const infoMsg = isJa\n            ? 'Github 100MB 制限フックを有効化しました (.git/hooks/pre-commit)'\n            : 'Github 100MB Limit Hook enabled (.git/hooks/pre-commit)';\n        // vscode.window.showInformationMessage(infoMsg);\n        return true;\n    } catch (err: any) {\n        const code = (err && err.code) ? String(err.code) : 'UNKNOWN';\n        const lang = (vscode.env.language || '').toLowerCase();\n        const isJa = (lang === 'ja' || lang.startsWith('ja-'));\n        const errorMsg = isJa\n            ? `フックの作成に失敗しました: ${preCommitFilePath} (${code})`\n            : `Failed to create hook: ${preCommitFilePath} (${code})`;\n        // vscode.window.showErrorMessage(errorMsg);\n        return false;\n    }\n}\n\nasync function wireWithGitExtension(context: vscode.ExtensionContext) {\n    try {\n        const gitExt = vscode.extensions.getExtension<any>('vscode.git');\n        const api = gitExt?.exports?.getAPI?.(1);\n        if (!api) {\n            return;\n        }\n\n        // Ensure for already-open repositories\n        for (const repo of api.repositories as Array<{ rootUri: vscode.Uri }>) {\n            void ensurePreCommitForRoot(context, repo.rootUri);\n        }\n\n        // When a new repository is opened\n        const openSub = api.onDidOpenRepository?.((repo: { rootUri: vscode.Uri }) => {\n            void ensurePreCommitForRoot(context, repo.rootUri);\n        });\n        if (openSub) {\n            context.subscriptions.push(openSub);\n        }\n\n        // Also respond to added workspace folders only (no full scan)\n        const wsSub = vscode.workspace.onDidChangeWorkspaceFolders((e) => {\n            for (const f of e.added) {\n                void ensurePreCommitForRoot(context, f.uri);\n            }\n        });\n        context.subscriptions.push(wsSub);\n    } catch {\n        // ignore if Git extension is unavailable\n    }\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["async","ensurePreCommitForRoot","context","rootUri","configFilePath","fsPath","fs","existsSync","postCheckoutFilePath","postCommitFilePath","postMergeFilePath","prePushFilePath","hooksDirPath","preCommitFilePath","mkdirSync","recursive","hookUri","vscode","Uri","joinPath","extensionUri","scriptContent","workspace","readFile","writeFileSync","lang2","env","language","toLowerCase","msg","startsWith","window","setStatusBarMessage","lang","err","code","String","gitExt","extensions","getExtension","api","exports","getAPI","repo","repositories","openSub","onDidOpenRepository","subscriptions","push","wsSub","onDidChangeWorkspaceFolders","e","f","added","uri","wireWithGitExtension","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}